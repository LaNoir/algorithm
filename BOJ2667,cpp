#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
#include <string>
using namespace std;

int N,M,V;
int board[25][25];


int visited[25][25];

int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0 ,-1,0,1 };

int bfs(int y, int x)
{
	int res = 1;
	queue<pair<int, int>> b;
	b.push({ y,x });
	visited[y][x] = 1;

	int cx,cy,newx, newy;
	while (!b.empty()) {
		cy = b.front().first;
		cx = b.front().second;
		b.pop();
		for (int i = 0; i < 4; i++) {
			newx = cx + dx[i];
			newy = cy + dy[i];
			if (newx < 0 || newy < 0 || newx >= N || newy >= N || visited[newy][newx] == 1 || board[newy][newx] == 0) {
				continue;
			}
			else {
				b.push({ newy,newx });
				visited[newy][newx] = 1;
				res++;
			}
		}
	}

	return res;
}

int main() {

	cin >> N;
	string s;
	for (int i = 0; i < N; i++) {
		cin >> s;
		for (int j = 0; j < N; j++)
		{
			board[i][j] = s[j] - '0';
		}
	}
	
	vector<int> danji;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (board[i][j] == 1 && visited[i][j] == 0) {
				int a = bfs(i, j);
				danji.push_back(a);
			}
		}
	}

	sort(danji.begin(), danji.end());

	cout << danji.size() << "\n";
	for (int i = 0; i < danji.size(); i++)
	{
		cout << danji[i] << "\n";
	}
}